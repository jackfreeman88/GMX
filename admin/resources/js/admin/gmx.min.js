$(function () {
	$.validator.addMethod("remote_valid", function (value, element, jdata) {
		var x = $.ajax({
			type: "POST",
			url: gmx_app.baseURL() + "/" + jdata.url,
			async: false,
			dataType: "json",
			data: {
				_token: gmx_app.getToken(),
				query: jdata.query
			},
		}).responseText;
		return (x === 'false') ? false : true;
	}, function (value, element) {
		return value.msg;
	});
	$.validator.addMethod("regx", function (value, element, regexpr) {
		temp = new RegExp(regexpr.expr);
		return temp.test(value);
	}, function (value, element) { return value.msg });
	$.validator.addMethod("expiryvalidate", function (value, element) {
		var expiry = value.split('/');
		var result = true;

		if (expiry[0] > 12 || expiry[0] < 1) {
			result = false;
		}

		var current_year = new Date().getFullYear().toString().substr(-2);
		if (expiry[1] < current_year) {
			result = false;
		}

		return this.optional(element) || result;
	}, "Please enter valid expiration date.");
	$.validator.addMethod('filesize', function (value, element, param) {
		return this.optional(element) || (element.files[0].size <= param * 1024 * 1024)
	}, 'File size must be less than {0} MB');
	$.validator.addMethod('ckrequired', function (value, element) {
		var idname = $(element).attr('id');
		CKEDITOR.instances[idname].updateElement(); // update textarea
		var editorcontent = element.value.replace(/<[^>]*>/gi, '').trim(); // strip tags
		return editorcontent.length !== 0;
	});

	$.validator.addMethod("password_strength", function (value, element) {
		/* temp = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})");
		return (this.optional(element) || temp.test(value)); */
		return true;
	}, 'Use 1 lowercase, 1 uppercase, 1 numeric & 1 special character.');

	/* $.validator.addMethod("youtubeUrl", function(value, element, param) {
		if(value == ''){
			return true;
		}else{
			return value.match(/^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/);
		}
	},'Please enter valid YouTube URL.');
	$.validator.addMethod("noDecimal", function(value, element) {
		return !(value % 1);
	}, "No decimal numbers.");
	$(document).on('click','.remove-all',function(event){
		gmx_app.ajaxRequest("notifications/read-notification",new FormData()).then(res=>{
			if(res.data.success && res.data.success == "true"){
				$(".notifyCnt").html("0");
			}
		}).catch(err=>{});
	}); */
	gmx_validation.init();

});
gmx_validation = {
	init: function () {
		$('#signInForm').validate({
			rules: {
				email: {
					required: true
				},
				password: {
					required: true,
					minlength: 6,
					maxlength: 20,
				}
			},
			messages: {
				email: {
					required: "Please enter email address."
				},
				password: {
					required: "Please enter password.",
					minlength: "Please enter minimum 6 characters."
				}
			},
			submitHandler: function (form) {
				var l = Ladda.create($(form).find('button').get(0));
				l.start();
				form.submit();
			}
		});
		$('#forgotpasswordFrom').validate({
			rules: {
				email: {
					required: true,
					email: true,
				}
			},
			messages: {
				email: {
					required: "Please enter email address.",
					email: "Please enter a valid email address.",
				}
			},
			submitHandler: function (form) {
				var l = Ladda.create($(form).find('button').get(0));
				l.start();
				form.submit();
			}
		});
		$('#confirmnewpasswordform').validate({
			rules: {
				password: {
					required: true,
					password_strength: true,
					minlength: 6,
					maxlength: 20,
				},
				confirmpassword: {
					required: true,
					minlength: 6,
					maxlength: 20,
					equalTo: "#password"
				}
			},
			messages: {
				password: {
					required: "Please enter new password.",
					minlength: "Please enter minimum 6 character.",
					maxlength: "Please enter maximum 20 character.",
				},
				confirmpassword: {
					required: "Please enter confirm password.",
					minlength: "Please enter minimum 6 character.",
					maxlength: "Please enter maximum 20 character.",
					equalTo: "Please enter same as new password."
				},
			},
			submitHandler: function (form) {
				var l = Ladda.create($(form).find('button').get(0));
				l.start();
				form.submit();
			}
		});
		$('#userProfileForm').validate({
			ignore: ".ignore",
			rules: {
				first_name: {
					required: true,
					normalizer: function (value) {
						return $.trim(value);
					}
				},
				last_name: {
					required: true,
					normalizer: function (value) {
						return $.trim(value);
					}
				},
				timezone: {
					required: true
				},
			},
			messages: {
				first_name: {
					required: "Please enter first name.",
				},
				last_name: {
					required: "Please enter last name.",
				},
				timezone: {
					required: "Please select timezone."
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});
		$('#changePasswordForm').validate({
			ignore: ".ignore",
			rules: {
				current_password: {
					required: true,
				},
				password: {
					required: true,
					password_strength: true,
					minlength: 6,
					maxlength: 20,
				},
				password_confirmation: {
					required: true,
					equalTo: "#password",
				},
			},
			messages: {
				current_password: {
					required: "Please enter current password.",
				},
				password: {
					required: "Please enter new password.",
					minlength: "Please enter a minimum of 6 characters.",
					maxlength: "Please enter a maximum of 20 characters.",
				},
				password_confirmation: {
					required: "Please confirm new password.",
					equalTo: "Confirm password should be same as new password.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					return true;
				} else {
					return false;
				}
			}
		});
		$('#contactform').validate({
			ignore: ".ignore",
			rules: {
				first_name: {
					required: true,
					normalizer: function (value) {
						return $.trim(value);
					},
				},
				last_name: {
					required: true,
					normalizer: function (value) {
						return $.trim(value);
					},
				},
				email: {
					required: true,
					email: true,
				},
				phone: {
					required: true,
					minlength: 10,
					maxlength: 10,
					regx: {
						expr: '^[\w+0-9/+/(/)-\w]*$',
						msg: 'Phone number is invalid. Spaces not allowed.'
					}
				},
				message: {
					required: true,
					normalizer: function (value) {
						return $.trim(value);
					},
				},
				"hiddenRecaptcha": {
					required: function () {
						if (grecaptcha.getResponse() == '') {
							return true;
						} else {
							return false;
						}
					}
				}
			},
			messages: {
				first_name: {
					required: "Please enter first name.",
				},
				last_name: {
					required: "Please enter last name.",
				},
				email: {
					required: "Please enter email address.",
					email: "Please enter a valid email address.",
				},
				phone: {
					required: "Please enter phone number.",
					minlength: "Please enter a minimum of 10 characters.",
					maxlength: "Please enter valid phone number.",
				},
				message: {
					required: "Please enter message.",
				},
				"hiddenRecaptcha": {
					required: "Please select captcha box."
				}
			},
			errorPlacement: function (error, element) {
				if (element.attr("type") == "input") {
					error.insertAfter(element.parent().parent());
				} else if (element.attr("type") == "checkbox") {
					error.insertAfter(element.parent().parent());
				} else {
					error.insertAfter(element);
				}
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					return true;
				} else {
					return false;
				}
			}
		});

		$('#buyerform').validate({
			ignore: ".ignore",
			rules: {
				firstName: {
					required: true,
				},
				email: {
					required: true
				},
				phoneNumber: {
					required: true
				},
				state: {
					required: true,
				},
			},
			messages: {
				firstName: {
					required: "Please enter first name.",
				},
				email: {
					required: "Please Enter Email Address."
				},
				phoneNumber: {
					required: "Please Enter phone Number."
				},
				state: {
					required: "Please Enter state."
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#sallerform').validate({
			ignore: ".ignore",
			rules: {
				firstName: {
					required: true,
				},
				lastName: {
					required: true,
				},
				email: {
					required: true
				},
				phoneNumber: {
					required: true
				},
				state: {
					required: true,
				},
			},
			messages: {
				firstName: {
					required: "Please enter first name.",
				},
				lastName: {
					required: "Please enter last name.",
				},
				email: {
					required: "Please Enter Email Address."
				},
				phoneNumber: {
					required: "Please Enter phone Number."
				},
				state: {
					required: "Please Enter state."
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#categoryform').validate({
			ignore: ".ignore",
			rules: {
				title: {
					required: true,
				},
			},
			messages: {
				title: {
					required: "Please enter title.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#strainform').validate({
			ignore: ".ignore",
			rules: {
				title: {
					required: true,
				},
			},
			messages: {
				title: {
					required: "Please enter title.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});
		$('#stateform').validate({
			ignore: ".ignore",
			rules: {
				name: {
					required: true,
				},
			},
			messages: {
				name: {
					required: "Please enter name.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#med_recform').validate({
			ignore: ".ignore",
			rules: {
				title: {
					required: true,
				},
			},
			messages: {
				title: {
					required: "Please enter title.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#subscriptionForm').validate({
			ignore: ".ignore",
			rules: {
				title: {
					required: true,
				},
				description: {
					required: true,
				},
				price: {
					required: true,
				},
			},
			messages: {
				title: {
					required: "Please enter title.",
				},
				description: {
					required: "Please enter description.",
				},
				price: {
					required: "Please enter description.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

		$('#licenseTypeform').validate({
			ignore: ".ignore",
			rules: {
				title: {
					required: true,
				},
			},
			messages: {
				title: {
					required: "Please enter title.",
				},
			},
			errorPlacement: function (error, element) {
				error.insertAfter(element);
			},
			submitHandler: function (form) {
				if ($(form).valid()) {
					var l = Ladda.create($(form).find('button').get(0));
					l.start();
					return true;
				} else {
					return false;
				}
			}
		});

	}
};
gmx_loader = {
	start: function (element) {
		element.attr('disabled', 'disabled').addClass('spinner-text').append('<div class="spinner"><span class="double-bounce1"></span><span class="double-bounce2"></span></div>');
	},
	/* stop: function(element){
		element.removeAttr('disabled').removeClass('spinner-text').children('.spinner').remove();
	},
	preStart: function(){
		$(".preloadertwo").show();
	},
	preStop: function(element){
		$(".preloadertwo").hide();
	} */
};
gmx_modal = {
	confirmModal: function (url, text = '') {
		if (text == '') {
			text = 'Yes, delete it!';
		}
		Swal.fire({
			title: 'Are you sure?',
			icon: 'error',
			showCancelButton: true,
			confirmButtonText: text,
			buttonsStyling: false,
			customClass: {
				confirmButton: 'btn btn-outline-primary btn-wh-138-50 me-2',
				cancelButton: 'btn btn-outline-danger btn-wh-138-50',
			}
		}).then((result) => {
			if (result.value) {
				window.location.href = url;
			}
		});
	},
	generalModal: function (url, type, confirm_button_text, cancel_button_text) {
		if (!confirm_button_text) { confirm_button_text = "Ok"; }
		if (!cancel_button_text) { cancel_button_text = "Cancel"; }
		Swal.fire({
			title: 'Are you sure?',
			icon: type,
			showCancelButton: true,
			confirmButtonText: confirm_button_text,
			cancelButtonText: cancel_button_text,
			buttonsStyling: false,
			customClass: {
				confirmButton: 'btn btn-outline-primary btn-wh-138-50 me-2',
				cancelButton: 'btn btn-outline-danger btn-wh-138-50',
			}
		}).then((result) => {
			if (result.value) {
				window.location.href = url;
			}
		});
	},
	defaultModal: function (url, title) {
		$.ajax({
			url: url,
			success: function (response) {
				$('#defaultModel #modalTitle').html(title);
				$('#defaultModel .modal-body').html("");
				$('#defaultModel .modal-body').html(response);
			}
		});
		$('#defaultModel').modal('show', { backdrop: 'true' });
	},
	largeModel: function (url, title) {
		$.ajax({
			url: url,
			success: function (response) {
				$('#largeModel #modalTitle').html(title);
				$('#largeModel .modal-body').html("");
				$('#largeModel .modal-body').html(response);
				// gmx_app.numericCheck();
				// floatinformINIT();
			}
		});
		$('#largeModel').modal('show', { backdrop: 'true' });
	},
	xlargeModel: function (url, title) {
		$.ajax({
			url: url,
			success: function (response) {
				$('#xlargeModel #xlmodalTitle').html(title);
				$('#xlargeModel .modal-body').html("");
				$('#xlargeModel .modal-body').html(response);
				// gmx_app.numericCheck();
				// floatinformINIT();
			}
		});
		$('#xlargeModel').modal('show', { backdrop: 'true' });
	}
};
gmx_app = {
	baseURL: function () {
		return $('base').attr('href');
	},
	getToken: function () {
		return $('meta[name="csrf-token"]').attr('content');
	},
	ajaxRequest: function (reqURL, reqData, reqMethod = "", reqDataType = "") {
		return axios({
			baseURL: gmx_app.baseURL(),
			url: reqURL,
			method: (reqMethod != "") ? reqMethod : "post",
			headers: { 'Content-Type': (reqDataType != "") ? reqDataType : "application/x-www-form-urlencoded" },
			data: reqData,
			async: false,
		});
	},
	getckeditor: function (element, ck_config) {
		if (ck_config == "") {
			var ck_config = {
				height: '20em',
				removeButtons: 'Source,Templates,Save,NewPage,ExportPdf,Preview,Print,Cut,Undo,Redo,Copy,Paste,PasteText,PasteFromWord,Find,Replace,SelectAll,Scayt,Form,Checkbox,Radio,TextField,Textarea,Select,Button,ImageButton,HiddenField,About,Maximize,BGColor,ShowBlocks,TextColor,Styles,Format,Font,FontSize,Iframe,Flash,Table,Image,HorizontalRule,Smiley,SpecialChar,PageBreak,Link,Unlink,Anchor,Language,BidiRtl,BidiLtr,JustifyLeft,Blockquote,Outdent,Indent,CreateDiv,JustifyCenter,JustifyRight,JustifyBlock,BulletedList,NumberedList,CopyFormatting,RemoveFormat,Underline,Strike,Superscript,Subscript',
				removePlugins: 'elementspath'
			};
		}
		var eleid = element.attr('id');
		if ($('#' + eleid).length) {
			CKEDITOR.replace(eleid, ck_config);
			CKEDITOR.config.allowedContent = true;
		}

	},
	notifyWithtEle: function (msg, type, pos, timeout) {
		pos = "";
		timeout = "";
		var noty = new Noty({
			theme: 'metroui',
			text: msg,
			type: type,
			layout: (pos != "") ? pos : 'topRight',
			timeout: (timeout != "") ? timeout : 3000,
			progressBar: false,
			closeWith: ['click'],
			killer: true,
		});
		noty.show();
	},
	/* 	getautoaddress: function(id){
			var input = document.getElementById(id);
			google.maps.event.addDomListener(input,'keydown',function(event){
				if(event.keyCode === 13){
					event.preventDefault();
				}
			});
			return new google.maps.places.Autocomplete(input);
			// return new google.maps.places.Autocomplete(input,{componentRestrictions:{'country':['au','in']}});
		}, */
	readURL: function (input, image) {
		var fileInput = input;
		var filePath = fileInput.val();
		var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.svg)$/i;
		if (!allowedExtensions.exec(filePath)) {
			gmx_app.notifyWithtEle('Only png and jpg file is allowed.', 'error');
			fileInput.val('');
		} else {
			if (input[0].files && input[0].files[0]) {
				var reader = new FileReader();
				reader.onload = function (e) {
					image.attr('src', e.target.result);
				}
				reader.readAsDataURL(input[0].files[0]);
			}
		}
	},
};
$(document).on('keydown', '.numbersOnly', function (e) {
	if ($.inArray(e.keyCode, [8, 9, 27, 13, 189, 110]) !== -1 || (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) || (e.keyCode >= 35 && e.keyCode <= 40)) {
		return;
	}
	if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
		// alert("Dont allow");
		e.preventDefault();
	}
});
$(document).on('keydown input', '.charOnly', function (e) {
	if ($.inArray(e.keyCode, [8, 9, 13, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 37, 38, 40, 45, 46, 32]) !== -1 || (e.ctrlKey === true || e.metaKey === true) || (e.keyCode >= 65 && e.keyCode < 93))
		return;
	else
		e.preventDefault();
});

$(document).on('keyup click', 'input', function () {
	$(this).next('label.error').hide();
});

/* $(document).on('change','select2-hidden-accessible select2:select',function()
{
	$(this).next('label.error').remove();      
}); */

/* $(document).on('clck','.select2', function () {
	$(this).closest('label.error').remove();      
}); */
/* $(document).on("select2-opening", function (arg) {
	// var elem = $(arg.target);
	alert();
	if ($("#s2id_" + elem.attr("id") + " ul").hasClass("myErrorClass")) {
		//jquery checks if the class exists before adding.
		$(".select2-drop ul").addClass("myErrorClass");
	} else {
		$(".select2-drop ul").removeClass("myErrorClass");
	}
}); */
/* $(document).on("change", ".select2-offscreen", function() {
	alert();
}); */


$(document).on("click", ".select2-container", function () {
	$(this).next('label.error').remove();
});